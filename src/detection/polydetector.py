# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_polydetector', [dirname(__file__)])
        except ImportError:
            import _polydetector
            return _polydetector
        if fp is not None:
            try:
                _mod = imp.load_module('_polydetector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _polydetector = swig_import_helper()
    del swig_import_helper
else:
    import _polydetector
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


TRUE = _polydetector.TRUE
FALSE = _polydetector.FALSE
MAX_SYSCALL_NAME = _polydetector.MAX_SYSCALL_NAME
PROCESS_EXIT = _polydetector.PROCESS_EXIT
PROCESS_RUNNING = _polydetector.PROCESS_RUNNING
ERROR_PTRACE = _polydetector.ERROR_PTRACE
ERROR_KILL = _polydetector.ERROR_KILL
EXPECT_EXITED = _polydetector.EXPECT_EXITED
EXPECT_SIGNALED = _polydetector.EXPECT_SIGNALED
EXPECT_UNKNOWN = _polydetector.EXPECT_UNKNOWN
EXPECT_STOPPED = _polydetector.EXPECT_STOPPED
class ST_ProcessExitCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST_ProcessExitCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST_ProcessExitCode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["signal"] = _polydetector.ST_ProcessExitCode_signal_set
    __swig_getmethods__["signal"] = _polydetector.ST_ProcessExitCode_signal_get
    if _newclass:signal = _swig_property(_polydetector.ST_ProcessExitCode_signal_get, _polydetector.ST_ProcessExitCode_signal_set)
    __swig_setmethods__["description"] = _polydetector.ST_ProcessExitCode_description_set
    __swig_getmethods__["description"] = _polydetector.ST_ProcessExitCode_description_get
    if _newclass:description = _swig_property(_polydetector.ST_ProcessExitCode_description_get, _polydetector.ST_ProcessExitCode_description_set)
    __swig_setmethods__["received"] = _polydetector.ST_ProcessExitCode_received_set
    __swig_getmethods__["received"] = _polydetector.ST_ProcessExitCode_received_get
    if _newclass:received = _swig_property(_polydetector.ST_ProcessExitCode_received_get, _polydetector.ST_ProcessExitCode_received_set)
    def __init__(self): 
        this = _polydetector.new_ST_ProcessExitCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _polydetector.delete_ST_ProcessExitCode
    __del__ = lambda self : None;
ST_ProcessExitCode_swigregister = _polydetector.ST_ProcessExitCode_swigregister
ST_ProcessExitCode_swigregister(ST_ProcessExitCode)

class ST_ProcessSysCallFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST_ProcessSysCallFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST_ProcessSysCallFlow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _polydetector.new_ST_ProcessSysCallFlow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _polydetector.delete_ST_ProcessSysCallFlow
    __del__ = lambda self : None;
ST_ProcessSysCallFlow_swigregister = _polydetector.ST_ProcessSysCallFlow_swigregister
ST_ProcessSysCallFlow_swigregister(ST_ProcessSysCallFlow)

class ST_Tracer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST_Tracer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST_Tracer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["syscalls"] = _polydetector.ST_Tracer_syscalls_set
    __swig_getmethods__["syscalls"] = _polydetector.ST_Tracer_syscalls_get
    if _newclass:syscalls = _swig_property(_polydetector.ST_Tracer_syscalls_get, _polydetector.ST_Tracer_syscalls_set)
    __swig_setmethods__["flow"] = _polydetector.ST_Tracer_flow_set
    __swig_getmethods__["flow"] = _polydetector.ST_Tracer_flow_get
    if _newclass:flow = _swig_property(_polydetector.ST_Tracer_flow_get, _polydetector.ST_Tracer_flow_set)
    __swig_setmethods__["child_pid"] = _polydetector.ST_Tracer_child_pid_set
    __swig_getmethods__["child_pid"] = _polydetector.ST_Tracer_child_pid_get
    if _newclass:child_pid = _swig_property(_polydetector.ST_Tracer_child_pid_get, _polydetector.ST_Tracer_child_pid_set)
    __swig_setmethods__["got_child_signal"] = _polydetector.ST_Tracer_got_child_signal_set
    __swig_getmethods__["got_child_signal"] = _polydetector.ST_Tracer_got_child_signal_get
    if _newclass:got_child_signal = _swig_property(_polydetector.ST_Tracer_got_child_signal_get, _polydetector.ST_Tracer_got_child_signal_set)
    __swig_setmethods__["ctx"] = _polydetector.ST_Tracer_ctx_set
    __swig_getmethods__["ctx"] = _polydetector.ST_Tracer_ctx_get
    if _newclass:ctx = _swig_property(_polydetector.ST_Tracer_ctx_get, _polydetector.ST_Tracer_ctx_set)
    __swig_setmethods__["buffer"] = _polydetector.ST_Tracer_buffer_set
    __swig_getmethods__["buffer"] = _polydetector.ST_Tracer_buffer_get
    if _newclass:buffer = _swig_property(_polydetector.ST_Tracer_buffer_get, _polydetector.ST_Tracer_buffer_set)
    __swig_setmethods__["original_segment"] = _polydetector.ST_Tracer_original_segment_set
    __swig_getmethods__["original_segment"] = _polydetector.ST_Tracer_original_segment_get
    if _newclass:original_segment = _swig_property(_polydetector.ST_Tracer_original_segment_get, _polydetector.ST_Tracer_original_segment_set)
    __swig_setmethods__["segment_with_opcodes"] = _polydetector.ST_Tracer_segment_with_opcodes_set
    __swig_getmethods__["segment_with_opcodes"] = _polydetector.ST_Tracer_segment_with_opcodes_get
    if _newclass:segment_with_opcodes = _swig_property(_polydetector.ST_Tracer_segment_with_opcodes_get, _polydetector.ST_Tracer_segment_with_opcodes_set)
    __swig_setmethods__["executable_segment"] = _polydetector.ST_Tracer_executable_segment_set
    __swig_getmethods__["executable_segment"] = _polydetector.ST_Tracer_executable_segment_get
    if _newclass:executable_segment = _swig_property(_polydetector.ST_Tracer_executable_segment_get, _polydetector.ST_Tracer_executable_segment_set)
    __swig_setmethods__["original_segment_size"] = _polydetector.ST_Tracer_original_segment_size_set
    __swig_getmethods__["original_segment_size"] = _polydetector.ST_Tracer_original_segment_size_get
    if _newclass:original_segment_size = _swig_property(_polydetector.ST_Tracer_original_segment_size_get, _polydetector.ST_Tracer_original_segment_size_set)
    __swig_setmethods__["executable_segment_size"] = _polydetector.ST_Tracer_executable_segment_size_set
    __swig_getmethods__["executable_segment_size"] = _polydetector.ST_Tracer_executable_segment_size_get
    if _newclass:executable_segment_size = _swig_property(_polydetector.ST_Tracer_executable_segment_size_get, _polydetector.ST_Tracer_executable_segment_size_set)
    def __init__(self): 
        this = _polydetector.new_ST_Tracer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _polydetector.delete_ST_Tracer
    __del__ = lambda self : None;
ST_Tracer_swigregister = _polydetector.ST_Tracer_swigregister
ST_Tracer_swigregister(ST_Tracer)

LINUX64 = _polydetector.LINUX64
LINUX32 = _polydetector.LINUX32
LINUX_NUM_VERSIONS = _polydetector.LINUX_NUM_VERSIONS

def linux_call_type(*args):
  return _polydetector.linux_call_type(*args)
linux_call_type = _polydetector.linux_call_type

def SYSU_Init():
  return _polydetector.SYSU_Init()
SYSU_Init = _polydetector.SYSU_Init

def SYSU_Destroy():
  return _polydetector.SYSU_Destroy()
SYSU_Destroy = _polydetector.SYSU_Destroy

def SYSU_AnalyzeSegmentMemory(*args):
  return _polydetector.SYSU_AnalyzeSegmentMemory(*args)
SYSU_AnalyzeSegmentMemory = _polydetector.SYSU_AnalyzeSegmentMemory


